{"version":3,"sources":["components/People.jsx","components/Characters.jsx","App.js","reportWebVitals.js","index.js"],"names":["People","character","useState","show","setShow","id","className","onClick","name","gender","hair_color","eye_color","birth_year","Characters","people","setPeople","search","setSearch","next","setNext","loading","setLoading","prev","setPrev","url","length","useEffect","fetchAllCharacters","a","timer","setTimeout","console","time","fetch","res","json","data","results","clearTimeout","previous","log","type","placeholder","onChange","e","target","value","map","index","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yOAwBeA,MArBf,YAAgC,IAAdC,EAAa,EAAbA,UAChB,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,qBAAKC,GAAG,YAAR,SACE,8BACE,qBAAIC,UAAS,mBAAcH,EAAO,OAAS,IAAMI,QAAS,kBAAMH,GAASD,IAAzE,UACE,4BAAIF,EAAUO,OACbL,GACC,sBAAKG,UAAU,YAAf,UACE,yCAAYL,EAAUQ,UACtB,6CAAgBR,EAAUS,cAC1B,4CAAeT,EAAUU,aACzB,6CAAgBV,EAAUW,yBCkDzBC,MA7Df,WACE,MAA4BX,mBAAS,IAArC,mBAAOY,EAAP,KAAeC,EAAf,KACA,EAA4Bb,mBAAS,IAArC,mBAAOc,EAAP,KAAeC,EAAf,KACA,EAAwBf,mBAAS,IAAjC,mBAAOgB,EAAP,KAAaC,EAAb,KACA,EAA8BjB,oBAAS,GAAvC,mBAAOkB,EAAP,KAAgBC,EAAhB,KACA,EAAwBnB,mBAAS,IAAjC,mBAAOoB,EAAP,KAAaC,EAAb,KACMC,EAAMR,EAAOS,OAAS,EAAhB,+CAA4DT,GAAW,gCACnFU,qBAAU,WACRC,EAAmBH,KAClB,CAACA,IAEJ,IAAMG,EAAkB,uCAAG,WAAOH,GAAP,mBAAAI,EAAA,6DACnBC,EAAQC,YAAW,WACvBT,GAAW,KACV,KAHsB,SAKvBU,QAAQC,KAAK,gBALU,SAMLC,MAAMT,GAND,cAMjBU,EANiB,gBAOJA,EAAIC,OAPA,OAOjBC,EAPiB,OAQvBrB,EAAUqB,EAAKC,SACfC,aAAaT,GACbR,GAAW,GACXF,EAAQiB,EAAKlB,MACbK,EAAQa,EAAKG,UAZU,kDAcvBR,QAAQS,IAAR,MAduB,0DAAH,sDAsBxB,OACE,sBAAKlC,UAAU,kBAAf,UACE,qBAAKD,GAAG,UACN,qBAAKA,GAAG,WACR,qBAAKA,GAAG,WACV,sBAAKA,GAAG,UAAR,UACE,2CACA,uBAAOC,UAAU,aAAamC,KAAK,OAAOC,YAAY,YAAYC,SAXnD,SAACC,GACpB3B,EAAU2B,EAAEC,OAAOC,QAU2EA,MAAO9B,IACjG,qBAAKV,UAAU,aAAf,SACGc,EACC,qBAAKf,GAAG,cAAR,SAAsB,6CACpB,6BACCS,EAAOiC,KAAI,SAAC9C,EAAW+C,GAAZ,OACV,cAAC,EAAD,CAAoB/C,UAAWA,GAAlB+C,UAMrB,sBAAK3C,GAAG,aAAR,UACE,wBAAQA,GAAG,OAAOC,UAAoB,OAATgB,EAAgB,WAAa,SAAUf,QAAS,kBAAMoB,EAAmBL,IAAO2B,SAAmB,OAAT3B,EAAvH,kBACA,wBAAQjB,GAAG,OAAOC,UAAoB,OAATY,EAAgB,WAAa,SAAUX,QAAS,kBAAMoB,EAAmBT,IAAO+B,SAAmB,OAAT/B,EAAvH,4BChDKgC,MARf,WACE,OACE,qBAAK5C,UAAU,MAAf,SACE,cAAC,EAAD,OCOS6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.f113d58f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport '../People.css';\r\n\r\nfunction People({ character }) {\r\n  const [show, setShow] = useState(false);\r\n  return (\r\n    <div id='container'>\r\n      <div>\r\n        <li className={`char-con ${show ? 'glow' : ''}`} onClick={() => setShow(!show)}>\r\n          <p>{character.name}</p>\r\n          {show &&\r\n            <div className='char-info'>\r\n              <p>Gender: {character.gender}</p>\r\n              <p>Hair color: {character.hair_color}</p>\r\n              <p>Eye color: {character.eye_color}</p>\r\n              <p>Birth year: {character.birth_year}</p>\r\n            </div>\r\n          }\r\n        </li>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default People\r\n","import React, { useState, useEffect } from 'react'\r\nimport People from './People';\r\nimport '../People.css';\r\n\r\nfunction Characters() {\r\n  const [people, setPeople] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  const [next, setNext] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const [prev, setPrev] = useState('');\r\n  const url = search.length > 0 ? `https://swapi.dev/api/people/?search=${search}` : 'https://swapi.dev/api/people/';\r\n  useEffect(() => {\r\n    fetchAllCharacters(url);\r\n  }, [url])\r\n\r\n  const fetchAllCharacters = async (url) => {\r\n    const timer = setTimeout(() => {\r\n      setLoading(true);\r\n    }, 900);\r\n    try {\r\n      console.time('request time');\r\n      const res = await fetch(url);\r\n      const data = await res.json();\r\n      setPeople(data.results);\r\n      clearTimeout(timer);\r\n      setLoading(false);\r\n      setNext(data.next);\r\n      setPrev(data.previous);\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setSearch(e.target.value);\r\n  }\r\n\r\n  return (\r\n    <div className=\"star-background\">\r\n      <div id=\"stars\"></div>\r\n        <div id=\"stars2\"></div>\r\n        <div id=\"stars3\"></div>\r\n      <div id=\"wrapper\">\r\n        <h1>Star wars</h1>\r\n        <input className='input-glow' type='text' placeholder='Search...' onChange={handleChange} value={search} />\r\n        <div className='people-con'>\r\n          {loading ?\r\n            <div id='loading-bar'><p>Loading...</p></div>\r\n            : <ul>\r\n              {people.map((character, index) => (\r\n                <People key={index} character={character} />\r\n              ))}\r\n            </ul>\r\n          }\r\n        </div>\r\n\r\n        <div id='pagination'>\r\n          <button id=\"prev\" className={prev === null ? 'disabled' : 'active'} onClick={() => fetchAllCharacters(prev)} disabled={prev === null ? true : false}>prev</button>\r\n          <button id=\"next\" className={next === null ? 'disabled' : 'active'} onClick={() => fetchAllCharacters(next)} disabled={next === null ? true : false}>next</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Characters\r\n","import Characters from './components/Characters';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Characters />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}